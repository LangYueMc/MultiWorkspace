buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
    }
}

plugins {
    id "fabric-loom" version "1.2.+"

    id "io.github.juuxel.loom-vineflower" version "1.11.0" // Quiltflower, a better decompiler

    id "maven-publish"
}

allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "io.github.juuxel.loom-vineflower"
    apply plugin: 'java-library'

    repositories {
        maven { url = "https://maven.quiltmc.org/repository/release" } // QM
        maven { url = 'https://maven.parchmentmc.org' } // Parchment
        maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
        maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, Forge Tags, Milk Lib, serialization-hooks
        maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
        maven { // Forge Config API Port
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven { // Modern KeyBinding
            url = "https://maven.nova-committee.cn/releases"
        }
        maven { url = "https://maven.terraformersmc.com/releases/" } // Emi
        maven { url = "https://maven.shedaniel.me/" } // REI and deps
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            name = "entity reach"
            url = "https://maven.jamieswhiteshirt.com/libs-release/"
        }
        maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
        maven { url = "https://modmaven.dev" } // Jei
        maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
        maven { url = 'https://maven.blamejared.com' }
        mavenCentral()
        mavenLocal()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    loom {
        runtimeOnlyLog4j = true

        runs.configureEach {
            vmArg("-Dmixin.debug.export=true")
            ideConfigGenerated = true
        }
        File aw = file("src/main/resources/${name}.accesswidener")
        if (aw.exists())
            accessWidenerPath.set(aw)

        interfaceInjection {
            enableDependencyInterfaceInjection = true
        }
    }

    ext {
        noSetupDependency = true
    }

    dependencies {
        // dev environment
        minecraft("com.mojang:minecraft:$minecraft_version")
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
            if (parchment_version != "none")
                it.parchment("org.parchmentmc.data:parchment-$parchment_version@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })
        modImplementation("net.fabricmc:fabric-loader:$loader_version")

        // common dependencies
        // each module can also specify additional ones
        modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

        implementation("javax.annotation:javax.annotation-api:1.3.2")
        implementation("com.google.code.findbugs:jsr305:$jsr305_version")
    }

    allprojects.each { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        it.enabled = false
    }

    // Run this task after updating minecraft to regenerate any required resources
    tasks.register('generateResources') {
        group = "fabric"
    }
}

dependencies {
    afterEvaluate {
        // fat jar depends on and includes all modules
        for (Project module : subprojects) {
            api(include(module))
        }
    }

    devEnv(dependencies)
    recipeViewers(dependencies)
}

def devEnv(DependencyHandler deps) {
    //deps.implementation 'net.fabricmc:fabric-fernflower:2.0.0'
    //deps.implementation 'org.vineflower:vineflower:1.9.2'

    deps.modLocalRuntime("dev.emi:trinkets:$trinkets_version")
    deps.modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
    deps.modLocalRuntime("curse.maven:balm-500525:${balm_cf_file_id}")
    deps.modLocalRuntime("curse.maven:craftingtweaks-502516:${crafting_tweaks_cf_file_id}")
    deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
    deps.modLocalRuntime("curse.maven:config-menus-forge-544048:$config_menu_version")

    //deps.modImplementation("vazkii.botania:Botania:$botania_version")
    //deps.modImplementation("vazkii.patchouli:Patchouli:$patchouli_version")
}

def recipeViewers(DependencyHandler deps) {
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "jei": deps.modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

sourceSets {
    allModules {
        for (Project p : subprojects) {
            def main = p.sourceSets.main
            compileClasspath += main.compileClasspath + main.output
            runtimeClasspath += main.runtimeClasspath + main.output
        }
    }
}

loom {
    runs {
        // make default run configs run all modules
        client {
            client()
            name "Minecraft Client (all modules)"
            source sourceSets.allModules
            runDir "workspace/run/test_client"
        }
        server {
            server()
            name "Minecraft Server (all modules)"
            source sourceSets.allModules
            runDir "workspace/run/test_server"
        }
    }
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}

remapJar {
    afterEvaluate {
        subprojects.each {
            nestedJars.from project("${it.path}").tasks.named("remapJar")
        }
    }
}