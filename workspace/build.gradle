buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "fabric-loom" version "1.2.7"

    id "io.github.juuxel.loom-vineflower" version "1.11.0" // Vineflower, a better decompiler
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build

    id "maven-publish"
}

repositories {
    mavenLocal()
    mavenCentral()

    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = 'https://maven.parchmentmc.org' } // Parchment

    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, Forge Tags, serialization-hooks
    maven { url = "https://jitpack.io/" } // for step height eam, Porting Lib: Mixin Extras, Fabric ASM
    maven { // Forge Config API Port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven { // Modern KeyBinding
        url "https://maven.nova-committee.cn/releases"
    }

    maven { url = "https://maven.terraformersmc.com/" } // Emi
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "entity reach"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }

    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
    maven { url = "https://modmaven.dev" } // Jei
    maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
    maven { url = 'https://maven.blamejared.com' }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

loom {
    runs {
        datagen {
            client()
            ideConfigGenerated = true

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=workspace"
            //vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_client"
        }

        client {
            client()
            ideConfigGenerated = true

            //vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_client"
        }
        server {
            server()
            ideConfigGenerated = true

            //vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_server"
        }
        /*gametest {
            server()
            name "Test"
            source sourceSets.main
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "run/gametest_server"
        }*/
    }

    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }

    mods {
        workspace {
            sourceSet sourceSets.main
        }
        sophisticatedcore {
            sourceSet project(':SophisticatedCore').sourceSets.main
        }
        sophisticatedbackpacks {
            sourceSet project(':SophisticatedBackpacks').sourceSets.main
        }
        sophisticatedstorage {
            sourceSet project(':SophisticatedStorage').sourceSets.main
        }
    }
}

dependencies {
    setup(dependencies)
    devEnv(dependencies)
    recipeViewers(dependencies)
    dependencies(dependencies)
}

def setup(DependencyHandler deps) {
    deps.minecraft("com.mojang:minecraft:$minecraft_version")
    deps.mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
        if (parchment_version != "none")
            it.parchment("org.parchmentmc.data:parchment-$parchment_version@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    deps.modImplementation("net.fabricmc:fabric-loader:$loader_version")
}

def devEnv(DependencyHandler deps) {
    //deps.implementation 'net.fabricmc:fabric-fernflower:2.0.0'
    //deps.implementation 'org.vineflower:vineflower:1.9.2'

    deps.modLocalRuntime("maven.modrinth:lazydfu:$lazy_dfu_version")
    deps.modLocalRuntime("dev.emi:trinkets:$trinkets_version")
    deps.modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
    deps.modLocalRuntime("curse.maven:balm-500525:${balm_cf_file_id}")
    deps.modLocalRuntime("curse.maven:craftingtweaks-502516:${crafting_tweaks_cf_file_id}")
    deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
    deps.modLocalRuntime("curse.maven:config-menus-forge-544048:$config_menu_version")

    //deps.modImplementation("vazkii.botania:Botania:$botania_version")
    //deps.modImplementation("vazkii.patchouli:Patchouli:$patchouli_version")
}

def dependencies(DependencyHandler deps) {
    deps.modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    deps.implementation deps.project(path: ':SophisticatedBackpacks', configuration: "namedElements")
    deps.implementation deps.project(path: ':SophisticatedStorage', configuration: "namedElements")
    deps.implementation deps.project(path: ':SophisticatedCore', configuration: "namedElements")
}

def recipeViewers(DependencyHandler deps) {
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "jei": deps.modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
